<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<domain name="ISAnalytics">
    <description>Real-time and batch IS Analytics.</description>
    <scenarios>
 <scenario type="ConfigureAccessToken">
            <description>Configure access token to analyse data</description>
            <templates>
                <template type="batch">
                    <executionParameters>
                    <cron>0 0 12 1/7 * ? *</cron>

                    <sparkScript>
                        <![CDATA[
                  create temporary table accessTokenRefreshTime using CarbonAnalytics options (tableName "ORG_WSO2_IS_ANALYTICS_ACCESSTOKENREFRESHTIMEDIFFERENCE", schema "userId STRING, clientId STRING, scopes STRING, timeDifference LONG, timestamp LONG");

create temporary table accessTokenRefreshAvrgTime using CarbonAnalytics options (tableName "ORG_WSO2_IS_ANALYTICS_ACCESSTOKENREFRESHSUMMARYTABLE", schema "userId STRING -i, clientId STRING -i, scopes STRING -i, minTimeDifference DOUBLE -i, maxTimeDifference DOUBLE -i", primaryKeys "userId, clientId, scopes");

INSERT INTO TABLE accessTokenRefreshAvrgTime
      SELECT temp.userId, temp.clientId, temp.scopes, getpercentileValue(AVG(timeDifference), SQRT(AVG(timeDifference*timeDifference) - AVG(timeDifference)*AVG(timeDifference)), $lowerPercentile) as minTimeDifference, getpercentileValue(AVG(timeDifference), SQRT(AVG(timeDifference*timeDifference) - AVG(timeDifference)*AVG(timeDifference)), $upperPercentile) as maxTimeDifference
      FROM
         (SELECT userId, clientId,scopes, timeDifference
          FROM accessTokenRefreshTime
            WHERE timestamp >= offsetInDays(-7)) temp
      GROUP BY userId, clientId, scopes;

                 ]]>
                    </sparkScript>

                    </executionParameters>
                </template>

            </templates>

            <parameters>
                <parameter name="lowerPercentile" type="double">
                    <displayName>Lower percentile</displayName>
                    <description>Lower percentile (value between 0 and 1) to calculate minimum time difference</description>
                    <defaultValue>0.10</defaultValue>
                </parameter>


                <parameter name="upperPercentile" type="double">
                    <displayName>Upper percentile</displayName>
                    <description>Upper percentile (value between 0 and 1) to calculate maximum time difference</description>
                    <defaultValue>0.95</defaultValue>
                </parameter>
            </parameters>


    </scenario>

        <scenario type="ConfigureAlertLongSessions">
            <description>Configure long session duration detection</description>
            <templates>
                <template type="realtime">
                    <![CDATA[
                        /* Enter a unique ExecutionPlan */
                        @Plan:name('ISAnalytics-RealtimeAlerts-LongSessions')

                        /* Enter a unique description for ExecutionPlan */
                        @Plan:description('Detects long session durations and alerts the user')

                        /* define streams/tables and write queries here ... */

                        @Export('org.wso2.is.analytics.stream.LongSessions:1.0.0')
                        define stream AlertLongSessions (sessionId string, username string, duration long, avgDuration double);

                        @from(eventtable = 'analytics.table' , table.name = 'ORG_WSO2_IS_ANALYTICS_STREAM_AVERAGESESSIONDURATION', primary.keys = 'meta_tenantId, tenantDomain, username, userstoreDomain', indices = 'meta_tenantId, tenantDomain, username, userstoreDomain, avgDuration', wait.for.indexing = 'true', merge.schema = 'false')
                        define table AverageSessionDurationTable(meta_tenantId int, tenantDomain string, username string, userstoreDomain string, avgDuration double);

                        @from(eventtable = 'analytics.table' , table.name = 'ORG_WSO2_IS_ANALYTICS_STREAM_SESSIONINFO')
                        define table SessionStreamInfoTable(meta_tenantId int, sessionId string, startTimestamp long, renewTimestamp long, terminationTimestamp long, endTimestamp long, year int, month int, day int, hour int, minute int, duration long, isActive bool, username string, userstoreDomain string, remoteIp string, region string, tenantDomain string, serviceProvider string, identityProviders string, rememberMeFlag bool, userAgent string, usernameWithTenantDomainAndUserstoreDomain string);

                        define trigger periodicalTriggerStream at every 2 min;

                        from periodicalTriggerStream join SessionStreamInfoTable
                        select *
                        insert into SessionStreamInfoSummary;

                        from SessionStreamInfoSummary [duration > $sessionDurationThreshold and rememberMeFlag == false and isActive == true]
                        select meta_tenantId, sessionId, startTimestamp, renewTimestamp, terminationTimestamp, endTimestamp, duration, username, userstoreDomain, tenantDomain
                        insert into FilterLongSessions;

                        from FilterLongSessions as s join AverageSessionDurationTable as t
                        on (s.meta_tenantId == t.meta_tenantId and s.tenantDomain == t.tenantDomain and s.username == t.username and s.userstoreDomain == t.userstoreDomain) and s.duration > t.avgDuration
                        select s.sessionId, s.username, s.duration, t.avgDuration
                        insert into AlertLongSessions;
                 ]]>
                </template>
            </templates>
            <parameters>
                <parameter name="sessionDurationThreshold" type="long">
                    <displayName>Session Duration Threshold Value (Milliseconds)</displayName>
                    <description>Threshold value to filter long duration sessions</description>
                    <defaultValue>900000</defaultValue>
                </parameter>
            </parameters>
        </scenario>
        <scenario type="ConfigureSuspiciousLoginDetection">
            <description>Configure suspicious login success detection</description>
            <templates>
                <template type="realtime">
                    <![CDATA[
                        /* Enter a unique ExecutionPlan */
                        @Plan:name('IsAnalytics-ExecutionPlan-LoginSuccessAfterMultipleFailures')

                        /* Enter a unique description for ExecutionPlan */
                        -- @Plan:description('ExecutionPlan')

                        /* define streams/tables and write queries here ... */
                        @Import('org.wso2.is.analytics.stream.OverallAuthentication:1.0.0')
                        define stream AuthStream (meta_tenantId int, contextId string, eventId string, eventType string, authenticationSuccess bool, username string, localUsername string, userStoreDomain string, tenantDomain string, remoteIp string, region string, inboundAuthType string, serviceProvider string, rememberMeEnabled bool, forceAuthEnabled bool, passiveAuthEnabled bool, rolesCommaSeparated string, authenticationStep string, identityProvider string, authStepSuccess bool, stepAuthenticator string, isFirstLogin bool, identityProviderType string, _timestamp long);

                        @Export('org.wso2.is.analytics.stream.LoginSuccessAfterMultipleFailures:1.0.0')
                        define stream LoginAlertStream (username string, severity int, msg string, tenantDomain string, _timestamp long);

                        /* Query for detecting login attempts with same username*/
                        from every(e1=AuthStream) -> e2=AuthStream[authStepSuccess == false AND e1.meta_tenantId == e2.meta_tenantId AND e1.username == e2.username AND e1.userStoreDomain == e2.userStoreDomain AND e1.tenantDomain == e2.tenantDomain]<$minLoginFailures:> ->  e3=AuthStream[authStepSuccess == true AND e2.meta_tenantId == e3.meta_tenantId AND e2.username == e3.username AND e2.userStoreDomain == e3.userStoreDomain AND e2.tenantDomain == e3.tenantDomain]
                        within $timeDuration min
                        select e2[last].username, 1 as severity, str:concat('Successful login attempt after multiple login failures with same username detected at: ', time:dateFormat(e3[last]._timestamp,'yyyy-MM-dd HH:mm:ss'), '.') as msg, e2[last].tenantDomain, e3[last]._timestamp
                        output first every $timeDuration min
                        insert into LoginAlertStream;

                        /* Query for detecting login attempts with same contextId*/
                        from every(e1=AuthStream) -> e2=AuthStream[authStepSuccess == false AND e1.meta_tenantId == e2.meta_tenantId AND e1.contextId == e2.contextId]<$minLoginFailures:> ->  e3=AuthStream[authStepSuccess == true AND e2.meta_tenantId == e3.meta_tenantId AND e2.contextId == e3.contextId]
                        within $timeDuration min
                        select e2[last].username, 1 as severity, str:concat('Successful login attempt after multiple login failures with same context-Id detected at: ', time:dateFormat(e3[last]._timestamp,'yyyy-MM-dd HH:mm:ss'), '.') as msg, e2[last].tenantDomain, e3[last]._timestamp
                        output first every $timeDuration min
                        insert into LoginAlertStream;

                        /* Query for detecting login attempts from same IP*/
                        from every(e1=AuthStream) -> e2=AuthStream[authStepSuccess == false AND e1.meta_tenantId == e2.meta_tenantId AND e1.remoteIp == e2.remoteIp]<$minLoginFailures:> ->  e3=AuthStream[authStepSuccess == true AND e2.meta_tenantId == e3.meta_tenantId AND e2.remoteIp == e3.remoteIp]
                        within $timeDuration min
                        select e2[last].username, 1 as severity, str:concat('Successful login attempt after multiple login failures from same remote IP detected at: ', time:dateFormat(e3[last]._timestamp,'yyyy-MM-dd HH:mm:ss'), '.') as msg, e2[last].tenantDomain, e3[last]._timestamp
                        output first every $timeDuration min
                        insert into LoginAlertStream;
                    ]]>
                </template>
            </templates>
            <parameters>
                <parameter name="minLoginFailures" type="int">
                    <displayName>Minimum Login Failures</displayName>
                    <description>Minimum number of login failures (which is followed by a successful login) to detect suspicious login.</description>
                    <defaultValue>5</defaultValue>
                </parameter>

                <parameter name="timeDuration" type="int">
                    <displayName>Time Duration</displayName>
                    <description>Time duration(in minutes) within which the sequence of login failures followed by success event occurring.</description>
                    <defaultValue>1</defaultValue>
                </parameter>
            </parameters>
        </scenario>
        <scenario type="RegionExcessLoginAlert">
            <description>Send alerts when authentication requests from a particular region exceed a certain number</description>
            <templates>
                <template type="realtime">
                    <![CDATA[
                @Plan:name('IsAnalytics-ExecutionPlan-AuthenticationData')
                @import('org.wso2.is.analytics.stream.ProcessedOverallAuthentication:1.0.0')
		        define stream OverallAuthenticationProcessedStream (meta_tenantId int, contextId string, eventId string, eventType string, authenticationSuccess bool, username string, localUsername string, userStoreDomain string, tenantDomain string, remoteIp string, region string, inboundAuthType string, serviceProvider string, rememberMeEnabled bool, forceAuthEnabled bool, passiveAuthEnabled bool, rolesCommaSeparated string, authenticationStep string, identityProvider string, authStepSuccess bool, stepAuthenticator string, isFirstLogin bool, identityProviderType string, _timestamp long);
                @Export('org.wso2.is.analytics.stream.RegionExcessLoginAlert:1.0.0')
                define stream RegionExcessLoginAlert (region string, requestCount long, timestamp long);
                from OverallAuthenticationProcessedStream#window.timeBatch($timeWindow)
                select region, count(eventId) as requestCount, max(_timestamp) as timestamp
                group by region
                insert all events into perRegionOverallAuthenticationProcessedStream;
                from perRegionOverallAuthenticationProcessedStream [ requestCount > $maxRequestCount]
                select region, requestCount, timestamp
                insert into RegionExcessLoginAlert;
                 ]]>
                </template>
            </templates>
            <parameters>
                <parameter name="timeWindow" type="int">
                    <displayName>Time Window</displayName>
                    <description>Time window unit of monitoring events</description>
                    <defaultValue>1000</defaultValue>
                </parameter>
                <parameter name="maxRequestCount" type="int">
                    <displayName>Maximum Request Count</displayName>
                    <description>Maximum request count allowed within the Time Window to avoid alerting</description>
                    <defaultValue>100</defaultValue>
                </parameter>
            </parameters>
        </scenario>

        <scenario type="UserExcessLoginAlert">
            <description>Send alerts when authentication requests from a particular user exceed a certain number</description>
            <templates>
                <template type="realtime">
                    <![CDATA[
                @Plan:name('IsAnalytics-ExecutionPlan-AuthenticationData')
                @Import('org.wso2.is.analytics.stream.ProcessedOverallAuthentication:1.0.0')
                define stream OverallAuthenticationProcessedStream (meta_tenantId int, contextId string, eventId string, eventType string, authenticationSuccess bool, username string, localUsername string, userStoreDomain string, tenantDomain string, remoteIp string, region string, inboundAuthType string, serviceProvider string, rememberMeEnabled bool, forceAuthEnabled bool, passiveAuthEnabled bool, rolesCommaSeparated string, authenticationStep string, identityProvider string, authStepSuccess bool, stepAuthenticator string, isFirstLogin bool, identityProviderType string, _timestamp long);
                @Export('org.wso2.is.analytics.stream.UserExcessLoginAlert:1.0.0')
                define stream UserExcessLoginAlert (userStoreDomain string, tenantDomain string, username string, requestCount long, timestamp long);
                define stream UserExcessLoginAlert (userStoreDomain string, tenantDomain string, username string, requestCount long, timestamp long);
                from OverallAuthenticationProcessedStream#window.timeBatch($timeWindow)
                select userStoreDomain, tenantDomain, username, count(eventId) as requestCount, max(_timestamp) as timestamp
                group by userStoreDomain, tenantDomain, username
                insert all events into perUserOverallAuthenticationProcessedStream;
                from perUserOverallAuthenticationProcessedStream [ requestCount > $maxRequestCount]
                select userStoreDomain, tenantDomain, username, requestCount, timestamp
                insert into UserExcessLoginAlert;
                 ]]>
                </template>
            </templates>
            <parameters>
                <parameter name="timeWindow" type="int">
                    <displayName>Time Window</displayName>
                    <description>Time window unit of monitoring events</description>
                    <defaultValue>1000</defaultValue>
                </parameter>
                <parameter name="maxRequestCount" type="int">
                    <displayName>Maximum Request Count</displayName>
                    <description>Maximum request count allowed within the Time Window to avoid alerting</description>
                    <defaultValue>100</defaultValue>
                </parameter>
            </parameters>
        </scenario>

        <scenario type="SameAccountMultipleUsersLoginAlert">
            <description>Send alerts when authentication requests from a particular user is coming from two different regions within a certain time period</description>
            <templates>
                <template type="realtime">
                    <![CDATA[
                @Plan:name('IsAnalytics-ExecutionPlan-AuthenticationData')
                @Import('org.wso2.is.analytics.stream.ProcessedOverallAuthentication:1.0.0')
                define stream OverallAuthenticationProcessedStream (meta_tenantId int, contextId string, eventId string, eventType string, authenticationSuccess bool, username string, localUsername string, userStoreDomain string, tenantDomain string, remoteIp string, region string, inboundAuthType string, serviceProvider string, rememberMeEnabled bool, forceAuthEnabled bool, passiveAuthEnabled bool, rolesCommaSeparated string, authenticationStep string, identityProvider string, authStepSuccess bool, stepAuthenticator string, isFirstLogin bool, identityProviderType string, _timestamp long);

                @Export('org.wso2.is.analytics.stream.SameAccountMultipleUsersLoginAlert:1.0.0')
                define stream SameAccountMultipleUsersLoginAlert (userStoreDomain string, tenantDomain string, username string, prevRegion string, newRegion string, timestamp long);
                from every(e1=OverallAuthenticationProcessedStream) -> e2=OverallAuthenticationProcessedStream[ e1.userStoreDomain==userStoreDomain and e1.tenantDomain==tenantDomain and e1.username==username and e1.region!=region ]
                    within $minRegionSwitchTime sec
                select e1.userStoreDomain, e1.tenantDomain, e1.username, e1.region as prevRegion, e2.region as newRegion, e2._timestamp as timestamp
                insert into SameAccountMultipleUsersLoginAlert;
                 ]]>
                </template>
            </templates>
            <parameters>
                <parameter name="minRegionSwitchTime" type="int">
                    <displayName>Minimum Region Switch Time</displayName>
                    <description>Minimum switching time allowed to move between regions</description>
                    <defaultValue>1000</defaultValue>
                </parameter>
            </parameters>
        </scenario>
    </scenarios>
    <streams>
    </streams>
    <commonArtifacts>
        <artifact type="eventstream">
            {
            "name": "org.wso2.is.analytics.stream.RegionExcessLoginAlert",
            "version": "1.0.0",
            "nickName": "",
            "description": "",
            "payloadData": [
            {
            "name": "region",
            "type": "STRING"
            },
            {
            "name": "requestCount",
            "type": "LONG"
            },
            {
            "name": "timestamp",
            "type": "LONG"
            }
            ]
            }
        </artifact>
        <artifact type="eventstream">
            {
            "name": "org.wso2.is.analytics.stream.SameAccountMultipleUsersLoginAlert",
            "version": "1.0.0",
            "nickName": "",
            "description": "",
            "payloadData": [
            {
            "name": "userStoreDomain",
            "type": "STRING"
            },
            {
            "name": "tenantDomain",
            "type": "STRING"
            },
            {
            "name": "username",
            "type": "STRING"
            },
            {
            "name": "prevRegion",
            "type": "STRING"
            },
            {
            "name": "newRegion",
            "type": "STRING"
            },
            {
            "name": "timestamp",
            "type": "LONG"
            }
            ]
            }
        </artifact>
        <artifact type="eventstream">
            {
            "name": "org.wso2.is.analytics.stream.UserExcessLoginAlert",
            "version": "1.0.0",
            "nickName": "",
            "description": "",
            "payloadData": [
            {
            "name": "userStoreDomain",
            "type": "STRING"
            },
            {
            "name": "tenantDomain",
            "type": "STRING"
            },
            {
            "name": "username",
            "type": "STRING"
            },
            {
            "name": "requestCount",
            "type": "LONG"
            },
            {
            "name": "timestamp",
            "type": "LONG"
            }
            ]
            }
        </artifact>
    </commonArtifacts>
</domain>

